define([],
function(){
    var LSYS = LSYS || { REVISION: '1' }
    
    // The L-System generator
    
    LSYS.Sys = function( _iter, _angle, _start ) {
    
        this.iter = _iter;          // {int} The total number of iterations.
        this.angle = _angle;        // {float} The angle.
        this.start = _start;        // {string} The starting state
        this.rules = {};            // {object} The rules of the L-System. 
        
        //  Generated by the program
        
        this.n = 0;                 // {int}  The current iteration.
        this.output = this.start;   // {string} The string which becomes a output with the help of a renderer
        
        //  Everything after the 3rd parameter is a rule
        
        for ( var i=3; i<arguments.length; i++ ) {
            var map = arguments[i].split('=');
            this.rules[map[0]] = map[1];
        }
    }
    
    LSYS.Sys.prototype.run = function() {
        while ( this.n < this.iter ) {
            this.next();
            this.n++;
        }
    }
    
    //  Apply next rule
    
    LSYS.Sys.prototype.next = function() {
        var chars = this.output.split('');
        for ( var i in chars ) {
            if ( chars[i] in this.rules ) {
                chars[i] = this.rules[ chars[i] ];
            }
        }
        this.output = chars.join('');
    }
    
    LSYS.Renderer = function( _canvas ) {
        this.canvas = _canvas;
        this.constants = {
            '+': 'COUNTERCLOCK',
            '-': 'CLOCKWISE',
            '[': 'PUSH',
            ']': 'POP',
            'C': 'COLOR'
        };
    }
    
    return LSYS
});